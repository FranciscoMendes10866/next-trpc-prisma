import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "@/utils/trpc";
import { List, ThemeIcon, Card, TextInput, Button, Stack } from "@mantine/core";
import { CircleCheck, CircleDashed } from "tabler-icons-react";
import { useState } from "react";
import { Todo } from "@prisma/client";

const Home: NextPage = () => {
  const [text, setText] = useState<string>("");
  const { data, refetch } = trpc.useQuery(["findTodos"]);
  const { mutate: insert } = trpc.useMutation(["insertTodo"], {
    onSuccess: () => refetch(),
  });
  const { mutate: update } = trpc.useMutation(["updateTodo"], {
    onSuccess: () => refetch(),
  });
  const { mutate: remove } = trpc.useMutation(["deleteTodo"], {
    onSuccess: () => refetch(),
  });

  const submitTodo = () => {
    insert({ text });
    setText("");
  };

  const patchTodo = (todo: Todo) => {
    update({ ...todo, isCompleted: !todo.isCompleted });
  };

  const deleteTodo = (id: number) => {
    remove({ id });
  };

  return (
    <div>
      <Head>
        <title>To-do APP</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <Stack align="center" justify="center" style={{ height: "95vh" }}>
          <Card shadow="xl" p="lg" style={{ width: 400 }}>
            <List
              spacing="xs"
              size="sm"
              center
              icon={
                <ThemeIcon color="blue" size={26} radius="xl">
                  <CircleDashed size={16} />
                </ThemeIcon>
              }
            >
              {data?.map((todo, index) => (
                <List.Item
                  key={index}
                  {...(todo.isCompleted
                    ? {
                        icon: (
                          <ThemeIcon color="teal" size={26} radius="xl">
                            <CircleCheck size={16} />
                          </ThemeIcon>
                        ),
                      }
                    : {})}
                  {...(todo.isCompleted
                    ? { onClick: () => deleteTodo(todo.id) }
                    : { onClick: () => patchTodo(todo) })}
                >
                  {todo.text}
                </List.Item>
              ))}
            </List>
            <TextInput
              placeholder="Task"
              required
              size="md"
              my={15}
              value={text}
              onChange={(e) => setText(e.target.value)}
            />
            <Button
              size="md"
              fullWidth
              variant="gradient"
              gradient={{ from: "teal", to: "blue", deg: 60 }}
              onClick={submitTodo}
            >
              Add
            </Button>
          </Card>
        </Stack>
      </main>
    </div>
  );
};

export default Home;
